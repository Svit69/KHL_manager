import { Player } from '@/types/player';
import { PlayerUtils } from './playerUtils';
import { SalaryUtils } from './salaryUtils';
import { PlayersDataManager } from '../data/players';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤
interface RejectedTradeHistory {
  tradeHash: string;
  timestamp: number;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
const rejectedTrades: RejectedTradeHistory[] = [];

export interface TradeOffer {
  givingPlayers: Player[]; // –ò–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ú–´ –æ—Ç–¥–∞–µ–º
  receivingPlayers: Player[]; // –ò–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ú–´ –ø–æ–ª—É—á–∞–µ–º
  targetTeamId: string; // –ö–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
}

export interface TradeAnalysis {
  isAccepted: boolean;
  confidence: number; // 0-100%
  reasons: string[];
  delta?: number; // –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  category?: 'beneficial' | 'neutral' | 'unfavorable'; // üü¢üü°üî¥
  breakdown: {
    valueBalance: number;
    salaryImpact: number;
    playerInterest: number;
    teamNeed: number;
    ageAndPotential: number;
  };
}

export class TradeAI {
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
  static createTradeHash(offer: TradeOffer): string {
    const givingIds = offer.givingPlayers.map((p: Player) => p.id).sort().join(',');
    const receivingIds = offer.receivingPlayers.map((p: Player) => p.id).sort().join(',');
    return `${offer.targetTeamId}-${givingIds}-${receivingIds}`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –æ–±–º–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω
  static wasRecentlyRejected(tradeHash: string): boolean {
    const now = Date.now();
    const recentThreshold = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    const validIndex = rejectedTrades.findIndex(trade =>
      now - trade.timestamp > recentThreshold
    );
    if (validIndex !== -1) {
      rejectedTrades.splice(0, validIndex);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –æ–±–º–µ–Ω –≤ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
    return rejectedTrades.some(trade => trade.tradeHash === tradeHash);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
  static addRejectedTrade(tradeHash: string): void {
    rejectedTrades.push({
      tradeHash,
      timestamp: Date.now()
    });
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ
  static calculatePlayerValue(player: Player): number {
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const ratingValue = player.overallRating * 0.5;
    const potentialValue = player.potential * 0.4;

    // –®—Ç—Ä–∞—Ñ –∑–∞ –≤–æ–∑—Ä–∞—Å—Ç
    const age = PlayerUtils.calculateAge(player.birthDate);
    let agePenalty = 0;
    if (age > 30) {
      agePenalty = age - 30; // -1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –≥–æ–¥ –ø–æ—Å–ª–µ 30
    }
    if (age > 34) {
      agePenalty += (age - 34); // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ -1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –≥–æ–¥ –ø–æ—Å–ª–µ 34 (–∏—Ç–æ–≥–æ -2)
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–ø–µ—Ä–µ–ø–ª–∞—Ç–∞) - —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
    const expectedSalary = player.overallRating * 0.8; // –û–∂–∏–¥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
    const actualSalary = player.salary?.amount || 0;
    const overpay = Math.max(0, actualSalary - expectedSalary);
    const contractPenalty = overpay * 0.2; // -0.2 –±–∞–ª–ª–∞ –∑–∞ –∫–∞–∂–¥—ã–π 1 –º–ª–Ω –ø–µ—Ä–µ–ø–ª–∞—Ç—ã (–±—ã–ª–æ -1)

    // –ë–æ–Ω—É—Å—ã –¥–ª—è –∑–≤–µ–∑–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    let starBonus = 0;
    if (player.overallRating >= 80 && age < 30) {
      starBonus = 5; // +5 –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–ª–æ–¥—ã—Ö –∑–≤–µ–∑–¥
    } else if (player.overallRating >= 78) {
      starBonus = 2; // +2 –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ 78+ —Ä–µ–π—Ç–∏–Ω–≥–∞
    }

    // –ë–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ –∑–∞ —Å—Ä–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const contractTermBonus = this.calculateContractTermBonus(player, overpay);

    const totalValue = ratingValue + potentialValue - agePenalty - contractPenalty + starBonus + contractTermBonus;
    return Math.max(0, totalValue); // –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
  }

  // –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞/—à—Ç—Ä–∞—Ñ–∞ –∑–∞ —Å—Ä–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  static calculateContractTermBonus(player: Player, overpay: number): number {
    if (!player.contract.isActive) return 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const contractEndDate = new Date(player.contract.endDate);
    const currentDate = new Date();
    const yearsLeft = Math.max(0, Math.ceil((contractEndDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24 * 365)));

    if (yearsLeft <= 1) return 0; // –ò–≥—Ä–æ–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≥–æ–¥—É –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ

    // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ö–æ—Ä–æ—à–∏–π (–Ω–µ—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—ã)
    if (overpay <= 0) {
      // –ß–µ–º –¥–æ–ª—å—à–µ —Ö–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, —Ç–µ–º —Ü–µ–Ω–Ω–µ–µ –∏–≥—Ä–æ–∫
      return yearsLeft * 1.5; // +1.5 –∑–∞ –∫–∞–∂–¥—ã–π –≥–æ–¥ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    } else {
      // –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–ª–æ—Ö–æ–π (–µ—Å—Ç—å –ø–µ—Ä–µ–ø–ª–∞—Ç–∞)
      // –ß–µ–º –¥–æ–ª—å—à–µ –ø–ª–æ—Ö–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç, —Ç–µ–º –º–µ–Ω–µ–µ —Ü–µ–Ω–µ–Ω –∏–≥—Ä–æ–∫
      return -(yearsLeft * 1.0); // -1.0 –∑–∞ –∫–∞–∂–¥—ã–π –≥–æ–¥ –ø–ª–æ—Ö–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–¥–∞—á—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–ª—é—á–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
  static checkLastPlayerProtection(offer: TradeOffer): { shouldReject: boolean; reasons: string[] } {
    const reasons: string[] = [];

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã
    const teamPlayers = PlayersDataManager.getTeamPlayers(offer.targetTeamId);
    if (!teamPlayers || teamPlayers.length === 0) {
      return { shouldReject: false, reasons: [] };
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–∞–≤–µ
    const currentPositions = this.getPositionCounts(teamPlayers);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –º—ã –æ—Ç–¥–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º
    const givingAwayPositions = this.getPositionCounts(offer.receivingPlayers);
    const receivingPositions = this.getPositionCounts(offer.givingPlayers);

    // –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const keyPositions = {
      'G': { min: 1, name: '–≤—Ä–∞—Ç–∞—Ä—å' },
      'D': { min: 4, name: '–∑–∞—â–∏—Ç–Ω–∏–∫' },
      'C': { min: 2, name: '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π' },
      'LW': { min: 2, name: '–ª–µ–≤—ã–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π' },
      'RW': { min: 2, name: '–ø—Ä–∞–≤—ã–π –Ω–∞–ø–∞–¥–∞—é—â–∏–π' }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–ª—é—á–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    for (const [position, config] of Object.entries(keyPositions)) {
      const currentCount = currentPositions[position] || 0;
      const givingAwayCount = givingAwayPositions[position] || 0;
      const receivingCount = receivingPositions[position] || 0;

      // –£—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å: –æ—Ç–¥–∞–µ–º - –ø–æ–ª—É—á–∞–µ–º
      const finalCount = currentCount - givingAwayCount + receivingCount;

      if (finalCount < config.min) {
        reasons.push(`üö´ –ù–µ–ª—å–∑—è –æ—Ç–¥–∞—Ç—å ${config.name}: –æ—Å—Ç–∞–Ω–µ—Ç—Å—è ${finalCount}, –º–∏–Ω–∏–º—É–º ${config.min}`);
        reasons.push(`–¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤: ${currentCount}, –æ—Ç–¥–∞–µ–º: ${givingAwayCount}, –ø–æ–ª—É—á–∞–µ–º: ${receivingCount}`);
        return { shouldReject: true, reasons };
      }
    }

    return { shouldReject: false, reasons: [] };
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Å–¥–µ–ª–∫–∏
  static evaluateTrade(offer: TradeOffer): TradeAnalysis {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –æ–±–º–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω
    const tradeHash = this.createTradeHash(offer);
    if (this.wasRecentlyRejected(tradeHash)) {
      return {
        isAccepted: false,
        confidence: 95,
        reasons: ['üö´ –≠—Ç–æ—Ç –æ–±–º–µ–Ω —É–∂–µ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω', '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞ —Å–≤–æ–µ–≥–æ –º–Ω–µ–Ω–∏—è'],
        delta: -999,
        category: 'unfavorable',
        breakdown: {
          valueBalance: -100,
          salaryImpact: 0,
          playerInterest: 0,
          teamNeed: -100,
          ageAndPotential: 0
        }
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    const positionProtection = this.checkLastPlayerProtection(offer);
    if (positionProtection.shouldReject) {
      return {
        isAccepted: false,
        confidence: 95,
        reasons: positionProtection.reasons,
        delta: -999,
        category: 'unfavorable',
        breakdown: {
          valueBalance: -100,
          salaryImpact: 0,
          playerInterest: 0,
          teamNeed: -100,
          ageAndPotential: 0
        }
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –ø–æ—Ç–æ–ª–æ–∫
    const canAfford = SalaryUtils.canAffordTrade(offer.targetTeamId, offer.receivingPlayers, offer.givingPlayers);

    if (!canAfford) {
      return {
        isAccepted: false,
        confidence: 95,
        reasons: ['–°–¥–µ–ª–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ç–æ–ª–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç –∫–æ–º–∞–Ω–¥—ã'],
        delta: -999,
        category: 'unfavorable',
        breakdown: {
          valueBalance: -100,
          salaryImpact: -100,
          playerInterest: 0,
          teamNeed: -100,
          ageAndPotential: 0
        }
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º bulk-–æ–±–º–µ–Ω—ã (–º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –æ–¥–Ω–æ–≥–æ –∑–≤–µ–∑–¥–Ω–æ–≥–æ)
    const bulkAnalysis = this.analyzeBulkTrade(offer);
    if (bulkAnalysis.shouldReject) {
      return {
        isAccepted: false,
        confidence: 90,
        reasons: bulkAnalysis.reasons,
        delta: -999,
        category: 'unfavorable',
        breakdown: {
          valueBalance: -100,
          salaryImpact: 0,
          playerInterest: 0,
          teamNeed: -100,
          ageAndPotential: 0
        }
      };
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —Å —É—á–µ—Ç–æ–º bulk-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    let givingValue = offer.givingPlayers.reduce((sum, p) => sum + this.calculatePlayerValue(p), 0);
    const receivingValue = offer.receivingPlayers.reduce((sum, p) => sum + this.calculatePlayerValue(p), 0);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º bulk-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–µ–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    if (bulkAnalysis.bulkModifier < 1) {
      givingValue *= bulkAnalysis.bulkModifier;
    }

    // –î–µ–ª—å—Ç–∞ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç givingPlayers, –æ—Ç–¥–∞—é—Ç receivingPlayers)
    const delta = givingValue - receivingValue;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ
    let category: 'beneficial' | 'neutral' | 'unfavorable';
    let isAccepted: boolean;
    let confidence: number;
    const reasons: string[] = [];

    if (delta > 8) {
      category = 'beneficial';
      isAccepted = true;
      confidence = Math.min(95, 70 + delta * 2);
      reasons.push(`üü¢ –í—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω (Œî = +${delta.toFixed(1)})`);
      reasons.push('–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏');
    } else if (delta >= -2) {
      category = 'neutral';
      // –í –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ: 70% –æ—Ç–∫–∞–∑, 30% —Å–æ–≥–ª–∞—Å–∏–µ
      const randomChance = Math.random();
      isAccepted = randomChance < 0.3; // 30% —à–∞–Ω—Å –ø—Ä–∏–Ω—è—Ç–∏—è
      confidence = isAccepted ? 30 : 70;
      reasons.push(`üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω (Œî = ${delta.toFixed(1)})`);
      if (isAccepted) {
        reasons.push('üé≤ –ö–æ–º–∞–Ω–¥–∞ —Ä–µ—à–∏–ª–∞ —Ä–∏—Å–∫–Ω—É—Ç—å (30% —à–∞–Ω—Å)');
        reasons.push('–û–±–º–µ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑—É –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ');
      } else {
        reasons.push('üé≤ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–ø–æ—á–ª–∞ –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å (70% —à–∞–Ω—Å)');
        reasons.push('–û–±–º–µ–Ω –Ω–µ –¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π —É–ª—É—á—à–µ–Ω–∏—è');
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤
        this.addRejectedTrade(tradeHash);
      }
    } else {
      category = 'unfavorable';
      isAccepted = false;
      confidence = Math.min(95, 70 + Math.abs(delta) * 2);
      reasons.push(`üî¥ –ù–µ–≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω (Œî = ${delta.toFixed(1)})`);
      reasons.push('–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Ä—è–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏');
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤
      this.addRejectedTrade(tradeHash);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–ª–æ–¥—ã—Ö –∑–≤–µ–∑–¥–∞—Ö
    const youngStarsGiving = offer.givingPlayers.filter(p =>
      p.overallRating >= 80 && PlayerUtils.calculateAge(p.birthDate) < 30
    );
    const youngStarsReceiving = offer.receivingPlayers.filter(p =>
      p.overallRating >= 80 && PlayerUtils.calculateAge(p.birthDate) < 30
    );

    if (youngStarsGiving.length > 0) {
      reasons.push(`‚≠ê –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç ${youngStarsGiving.length} –º–æ–ª–æ–¥—ã—Ö –∑–≤–µ–∑–¥ (80+ —Ä–µ–π—Ç–∏–Ω–≥, <30 –ª–µ—Ç)`);
    }
    if (youngStarsReceiving.length > 0) {
      reasons.push(`üíî –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–¥–∞–µ—Ç ${youngStarsReceiving.length} –º–æ–ª–æ–¥—ã—Ö –∑–≤–µ–∑–¥ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å)`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ bulk-–∞–Ω–∞–ª–∏–∑–µ
    if (bulkAnalysis.reasons.length > 0) {
      reasons.push(...bulkAnalysis.reasons);
    }

    const breakdown = {
      valueBalance: delta,
      salaryImpact: this.calculateSalaryImpact(offer.receivingPlayers, offer.givingPlayers),
      playerInterest: this.calculatePlayerInterest(offer.givingPlayers, offer.targetTeamId),
      teamNeed: this.calculateTeamNeed(offer.receivingPlayers, offer.givingPlayers),
      ageAndPotential: this.calculateAgeAndPotential(offer.receivingPlayers, offer.givingPlayers)
    };

    return {
      isAccepted,
      confidence,
      reasons,
      delta,
      category,
      breakdown
    };
  }

  // –ê–Ω–∞–ª–∏–∑ bulk-–æ–±–º–µ–Ω–æ–≤ (–º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –æ–¥–Ω–æ–≥–æ)
  private static analyzeBulkTrade(offer: TradeOffer): {
    shouldReject: boolean;
    bulkModifier: number;
    reasons: string[];
  } {
    const reasons: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–æ–≤
    const givingCount = offer.givingPlayers.length;
    const receivingCount = offer.receivingPlayers.length;

    // –ï—Å–ª–∏ –æ–±–º–µ–Ω 1 –Ω–∞ 1 –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤ - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if (givingCount <= receivingCount) {
      return {
        shouldReject: false,
        bulkModifier: 1.0,
        reasons: []
      };
    }

    // Bulk-–æ–±–º–µ–Ω: –æ—Ç–¥–∞–µ–º –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤, —á–µ–º –ø–æ–ª—É—á–∞–µ–º
    const highestGivingRating = Math.max(...offer.givingPlayers.map(p => p.overallRating));
    const highestReceivingRating = Math.max(...offer.receivingPlayers.map(p => p.overallRating));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ "–∑–≤–µ–∑–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞": –µ—Å–ª–∏ –∏—Ö –ª—É—á—à–∏–π –∏–≥—Ä–æ–∫ –Ω–∞ 5+ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤—ã—à–µ –Ω–∞—à–µ–≥–æ –ª—É—á—à–µ–≥–æ
    if (highestReceivingRating - highestGivingRating >= 5) {
      reasons.push(`üö´ –û—Ç–∫–∞–∑: –∏—Ö –∑–≤–µ–∑–¥–∞ (${highestReceivingRating}) —Å–ª–∏—à–∫–æ–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –Ω–∞—à–µ–≥–æ –ª—É—á—à–µ–≥–æ (${highestGivingRating})`);
      reasons.push('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –æ—Ç–¥–∞—Ç—å –∑–≤–µ–∑–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–µ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö');
      return {
        shouldReject: true,
        bulkModifier: 0,
        reasons
      };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º bulk-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    let bulkModifier = 1.0;
    if (givingCount === 2) {
      bulkModifier = 0.65;
      reasons.push(`üìâ Bulk-—à—Ç—Ä–∞—Ñ: —Å—Ç–æ–∏–º–æ—Å—Ç—å 2 –∏–≥—Ä–æ–∫–æ–≤ —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ 65% (${bulkModifier}x)`);
    } else if (givingCount >= 3) {
      bulkModifier = 0.3;
      reasons.push(`üìâ Bulk-—à—Ç—Ä–∞—Ñ: —Å—Ç–æ–∏–º–æ—Å—Ç—å ${givingCount} –∏–≥—Ä–æ–∫–æ–≤ —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ 30% (${bulkModifier}x)`);
    }

    if (bulkModifier < 1.0) {
      reasons.push('–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É');
    }

    return {
      shouldReject: false,
      bulkModifier,
      reasons
    };
  }

  // –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤
  private static analyzePositionBalance(offer: TradeOffer): number {
    let score = 0;

    // –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—É—á–∞–µ–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    const positionCounts = this.getPositionCounts(offer.givingPlayers);
    const positionNeeds = { G: 2, D: 6, C: 4, LW: 4, RW: 4 }; // –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    Object.entries(positionCounts).forEach(([position, count]) => {
      const need = positionNeeds[position as keyof typeof positionNeeds] || 0;
      if (count > 0) {
        score += Math.min(count, need) * 2; // –ë–æ–Ω—É—Å –∑–∞ –Ω—É–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      }
    });

    // –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–¥–∞—á—É –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    const givingAway = this.getPositionCounts(offer.receivingPlayers);
    Object.entries(givingAway).forEach(([position, count]) => {
      if (position === 'G' && count > 0) {
        score -= count * 5; // –ë–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–¥–∞—á—É –≤—Ä–∞—Ç–∞—Ä–µ–π
      } else {
        score -= count; // –û–±—ã—á–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–¥–∞—á—É –∏–≥—Ä–æ–∫–æ–≤
      }
    });

    return score;
  }

  private static getPositionCounts(players: Player[]): Record<string, number> {
    return players.reduce((counts, player) => {
      counts[player.position] = (counts[player.position] || 0) + 1;
      return counts;
    }, {} as Record<string, number>);
  }

  // –ü—Ä–æ—Å—Ç—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private static calculateSalaryImpact(giving: Player[], receiving: Player[]): number {
    const givingSalary = giving.reduce((sum, p) => sum + (p.salary?.amount || 0), 0);
    const receivingSalary = receiving.reduce((sum, p) => sum + (p.salary?.amount || 0), 0);
    const salaryDiff = receivingSalary - givingSalary;

    if (salaryDiff <= 0) return Math.min(50, Math.abs(salaryDiff) * 2);
    return Math.max(-50, -salaryDiff);
  }

  private static calculatePlayerInterest(players: Player[], targetTeamId: string): number {
    if (players.length === 0) return 0;
    const favoriteTeamBonus = players.filter(p => p.favoriteClubs.includes(targetTeamId)).length * 20;
    return Math.min(50, favoriteTeamBonus);
  }

  private static calculateTeamNeed(giving: Player[], receiving: Player[]): number {
    const playerCountDiff = giving.length - receiving.length;
    if (playerCountDiff > 0) return playerCountDiff * 10;
    if (playerCountDiff < 0) return playerCountDiff * 15;
    return 0;
  }

  private static calculateAgeAndPotential(giving: Player[], receiving: Player[]): number {
    if (giving.length === 0 || receiving.length === 0) return 0;

    const avgGivingAge = giving.reduce((sum, p) => sum + PlayerUtils.calculateAge(p.birthDate), 0) / giving.length;
    const avgReceivingAge = receiving.reduce((sum, p) => sum + PlayerUtils.calculateAge(p.birthDate), 0) / receiving.length;

    return Math.min(25, Math.max(-25, (avgReceivingAge - avgGivingAge) * 2));
  }

}
