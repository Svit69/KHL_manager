import { Player } from '../types/player';
import { PlayersDataManager } from '../data/players';

export interface ContractDetails {
  salary: number;
  contractLength: number;
  contractType: 'one-way' | 'two-way';
  endDate: string;
}

export class RosterManager {
  
  // –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ù–°–ê –≤ –∫–æ–º–∞–Ω–¥—É
  static signFreeAgent(player: Player, teamId: string, contractDetails: ContractDetails): boolean {
    try {
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${player.firstName} ${player.lastName} –≤ –∫–æ–º–∞–Ω–¥—É ${teamId}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ù–°–ê
      if (player.club !== '–ù–°–ê' && player.contract.isActive) {
        console.error('–ò–≥—Ä–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Ä–æ—Å—Ç–µ—Ä–∞
      const currentRoster = PlayersDataManager.getTeamPlayers(teamId);
      const rosterLimits = this.checkRosterLimits(currentRoster, contractDetails.contractType);

      console.log(`üìä –¢–µ–∫—É—â–∏–π —Ä–æ—Å—Ç–µ—Ä –∫–æ–º–∞–Ω–¥—ã ${teamId}:`);
      console.log(`   –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${rosterLimits.totalPlayers}/40`);
      console.log(`   One-way –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: ${rosterLimits.oneWayPlayers}/25`);
      console.log(`   Two-way –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: ${rosterLimits.twoWayPlayers}`);

      if (!rosterLimits.canAddPlayer) {
        console.error(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ä–æ—Å—Ç–µ—Ä–∞: ${rosterLimits.limitMessage}`);
        return false;
      }

      const teamName = this.getTeamNameById(teamId);
      console.log(`üèí –ö–æ–º–∞–Ω–¥–∞: ${teamName}`);

      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
      const updatedPlayer: Player = {
        ...player,
        club: teamName,
        contract: {
          endDate: contractDetails.endDate,
          type: contractDetails.contractType,
          isActive: true
        },
        salary: {
          amount: contractDetails.salary,
          currency: 'RUB'
        }
      };

      console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫:`, {
        id: updatedPlayer.id,
        name: `${updatedPlayer.firstName} ${updatedPlayer.lastName}`,
        club: updatedPlayer.club,
        salary: updatedPlayer.salary.amount,
        contractActive: updatedPlayer.contract.isActive
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
      PlayersDataManager.updatePlayer(updatedPlayer);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –¥–æ–±–∞–≤–∏–ª—Å—è –≤ –∫–æ–º–∞–Ω–¥—É
      const updatedRoster = PlayersDataManager.getTeamPlayers(teamId);
      const playerInRoster = updatedRoster.find(p => p.id === player.id);

      if (playerInRoster) {
        console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${player.firstName} ${player.lastName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–æ—Å—Ç–µ—Ä –∫–æ–º–∞–Ω–¥—ã ${teamName}`);
        console.log(`üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ä–æ—Å—Ç–µ—Ä–∞: ${updatedRoster.length} –∏–≥—Ä–æ–∫–æ–≤`);
        return true;
      } else {
        console.error(`‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–æ—Å—Ç–µ—Ä–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        return false;
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
  private static getTeamNameById(teamId: string): string {
    const teamNames: { [key: string]: string } = {
      'ak-bars': '–ê–∫ –ë–∞—Ä—Å',
      'avtomobilist': '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç',
      'salavat-yulaev': '–°–∞–ª–∞–≤–∞—Ç –Æ–ª–∞–µ–≤',
      'avangard': '–ê–≤–∞–Ω–≥–∞—Ä–¥',
      'dynamo-mn': '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫',
      'ska': '–°–ö–ê',
      'torpedo': '–¢–æ—Ä–ø–µ–¥–æ',
      'metallurg': '–ú–µ—Ç–∞–ª–ª—É—Ä–≥',
      'spartak': '–°–ø–∞—Ä—Ç–∞–∫',
      'cska': '–¶–°–ö–ê',
      'amur': '–ê–º—É—Ä',
      'lada': '–õ–∞–¥–∞'
    };

    return teamNames[teamId] || teamId;
  }

  // –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  static calculateContractEndDate(contractLength: number): string {
    const currentDate = new Date();
    const endDate = new Date(currentDate.getFullYear() + contractLength, 4, 31); // 31 –º–∞—è
    return endDate.toISOString().split('T')[0];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–æ—Å—Ç–µ—Ä–∞
  static checkRosterLimits(currentRoster: Player[], newContractType: 'one-way' | 'two-way'): {
    totalPlayers: number;
    oneWayPlayers: number;
    twoWayPlayers: number;
    canAddPlayer: boolean;
    limitMessage: string;
  } {
    const totalPlayers = currentRoster.length;
    const oneWayPlayers = currentRoster.filter(p => p.contract.type === 'one-way').length;
    const twoWayPlayers = currentRoster.filter(p => p.contract.type === 'two-way').length;

    let canAddPlayer = true;
    let limitMessage = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç (40 –∏–≥—Ä–æ–∫–æ–≤)
    if (totalPlayers >= 40) {
      canAddPlayer = false;
      limitMessage = '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–æ—Å—Ç–µ—Ä–µ (40)';
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (25 –∏–≥—Ä–æ–∫–æ–≤)
    else if (newContractType === 'one-way' && oneWayPlayers >= 25) {
      canAddPlayer = false;
      limitMessage = '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö (25)';
    }

    return {
      totalPlayers,
      oneWayPlayers,
      twoWayPlayers,
      canAddPlayer,
      limitMessage
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞ –∫–æ–º–∞–Ω–¥—ã
  static checkSalaryCap(teamId: string, additionalSalary: number): {
    isValid: boolean;
    currentTotal: number;
    newTotal: number;
    capLimit: number
  } {
    const CAP_LIMIT = 900; // 900 –º–ª–Ω —Ä—É–±–ª–µ–π
    const currentRoster = PlayersDataManager.getTeamPlayers(teamId);
    const currentTotal = currentRoster.reduce((sum, player) => sum + (player.salary?.amount || 0), 0);
    const newTotal = currentTotal + additionalSalary;

    return {
      isValid: newTotal <= CAP_LIMIT,
      currentTotal,
      newTotal,
      capLimit: CAP_LIMIT
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ—Å—Ç–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
  static getRosterStats(teamId: string): {
    totalPlayers: number;
    oneWayPlayers: number;
    twoWayPlayers: number;
    goalies: number;
    defensemen: number;
    forwards: number;
    totalSalary: number;
    averageAge: number;
    averageRating: number;
  } {
    const roster = PlayersDataManager.getTeamPlayers(teamId);

    const oneWayPlayers = roster.filter(p => p.contract.type === 'one-way').length;
    const twoWayPlayers = roster.filter(p => p.contract.type === 'two-way').length;
    const goalies = roster.filter(p => p.position === 'G').length;
    const defensemen = roster.filter(p => p.position === 'D').length;
    const forwards = roster.filter(p => ['C', 'LW', 'RW'].includes(p.position)).length;

    const totalSalary = roster.reduce((sum, player) => sum + (player.salary?.amount || 0), 0);

    const ages = roster.map(p => {
      const birthDate = new Date(p.birthDate);
      const today = new Date();
      return today.getFullYear() - birthDate.getFullYear();
    });
    const averageAge = ages.length > 0 ? Math.round(ages.reduce((sum, age) => sum + age, 0) / ages.length) : 0;

    const ratings = roster.map(p => p.overallRating);
    const averageRating = ratings.length > 0 ? Math.round(ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length) : 0;

    return {
      totalPlayers: roster.length,
      oneWayPlayers,
      twoWayPlayers,
      goalies,
      defensemen,
      forwards,
      totalSalary,
      averageAge,
      averageRating
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–æ–º–∞–Ω–¥—ã
  static getPositionalNeeds(teamId: string): {
    needsGoalie: boolean;
    needsDefenseman: boolean;
    needsForward: boolean;
    recommendations: string[];
  } {
    const stats = this.getRosterStats(teamId);
    const recommendations: string[] = [];
    
    const needsGoalie = stats.goalies < 2;
    const needsDefenseman = stats.defensemen < 6;
    const needsForward = stats.forwards < 12;

    if (needsGoalie) {
      recommendations.push(`ü•Ö –ù—É–∂–µ–Ω –≤—Ä–∞—Ç–∞—Ä—å (—Å–µ–π—á–∞—Å: ${stats.goalies}/2)`);
    }
    if (needsDefenseman) {
      recommendations.push(`üõ°Ô∏è –ù—É–∂–Ω—ã –∑–∞—â–∏—Ç–Ω–∏–∫–∏ (—Å–µ–π—á–∞—Å: ${stats.defensemen}/6)`);
    }
    if (needsForward) {
      recommendations.push(`‚ö° –ù—É–∂–Ω—ã –Ω–∞–ø–∞–¥–∞—é—â–∏–µ (—Å–µ–π—á–∞—Å: ${stats.forwards}/12)`);
    }

    if (recommendations.length === 0) {
      recommendations.push('‚úÖ –°–æ—Å—Ç–∞–≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω');
    }

    return {
      needsGoalie,
      needsDefenseman,
      needsForward,
      recommendations
    };
  }
}
