import { Player } from '@/types/player';
import { PlayersDataManager } from '@/data/players';

export interface TransferResult {
  success: boolean;
  message: string;
  transferredPlayers: {
    toMyTeam: Player[];
    fromMyTeam: Player[];
  };
}

export class TransferUtils {
  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
  static executePlayerTrade(
    myTeamId: string,
    targetTeamId: string,
    myPlayers: Player[],
    theirPlayers: Player[]
  ): TransferResult {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
      const myTeamPlayers = PlayersDataManager.getTeamPlayers(myTeamId);
      const targetTeamPlayers = PlayersDataManager.getTeamPlayers(targetTeamId);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã
      const updatedMyTeam = [...myTeamPlayers];
      const updatedTargetTeam = [...targetTeamPlayers];

      // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –º–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–µ–ª–µ–≤—É—é
      myPlayers.forEach(player => {
        const index = updatedMyTeam.findIndex(p => p.id === player.id);
        if (index !== -1) {
          updatedMyTeam.splice(index, 1);
          // –ú–µ–Ω—è–µ–º –∫–ª—É–± –∏–≥—Ä–æ–∫–∞
          const transferredPlayer = { ...player, club: this.getTeamName(targetTeamId) };
          updatedTargetTeam.push(transferredPlayer);
        }
      });

      // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ—é
      theirPlayers.forEach(player => {
        const index = updatedTargetTeam.findIndex(p => p.id === player.id);
        if (index !== -1) {
          updatedTargetTeam.splice(index, 1);
          // –ú–µ–Ω—è–µ–º –∫–ª—É–± –∏–≥—Ä–æ–∫–∞
          const transferredPlayer = { ...player, club: this.getTeamName(myTeamId) };
          updatedMyTeam.push(transferredPlayer);
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
      PlayersDataManager.updateTeamRoster(myTeamId, updatedMyTeam);
      PlayersDataManager.updateTeamRoster(targetTeamId, updatedTargetTeam);

      return {
        success: true,
        message: `–û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! ${theirPlayers.length} –∏–≥—Ä–æ–∫(–æ–≤) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.`,
        transferredPlayers: {
          toMyTeam: theirPlayers.map(p => ({ ...p, club: this.getTeamName(myTeamId) })),
          fromMyTeam: myPlayers.map(p => ({ ...p, club: this.getTeamName(targetTeamId) }))
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞',
        transferredPlayers: {
          toMyTeam: [],
          fromMyTeam: []
        }
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
  private static getTeamName(teamId: string): string {
    const teamNames: Record<string, string> = {
      'ak-bars': '–ê–∫ –ë–∞—Ä—Å',
      'avtomobilist': '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç',
      'salavat-yulaev': '–°–∞–ª–∞–≤–∞—Ç –Æ–ª–∞–µ–≤',
      'avangard': '–ê–≤–∞–Ω–≥–∞—Ä–¥',
      'dynamo-mn': '–î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫'
    };
    return teamNames[teamId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω–∞
  static validateTrade(
    myTeamId: string,
    targetTeamId: string,
    myPlayers: Player[],
    theirPlayers: Player[]
  ): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –¥–ª—è –æ–±–º–µ–Ω–∞
    if (myPlayers.length === 0 && theirPlayers.length === 0) {
      errors.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
    const myTeamPlayers = PlayersDataManager.getTeamPlayers(myTeamId);
    const targetTeamPlayers = PlayersDataManager.getTeamPlayers(targetTeamId);

    myPlayers.forEach(player => {
      if (!myTeamPlayers.find(p => p.id === player.id)) {
        errors.push(`–ò–≥—Ä–æ–∫ ${player.firstName} ${player.lastName} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ`);
      }
    });

    theirPlayers.forEach(player => {
      if (!targetTeamPlayers.find(p => p.id === player.id)) {
        errors.push(`–ò–≥—Ä–æ–∫ ${player.firstName} ${player.lastName} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–∞–Ω–¥–µ ${this.getTeamName(targetTeamId)}`);
      }
    });

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  // –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ
  static createTradeNotification(result: TransferResult): string {
    if (!result.success) {
      return result.message;
    }

    const incoming = result.transferredPlayers.toMyTeam;
    const outgoing = result.transferredPlayers.fromMyTeam;

    let message = 'üîÑ –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n';
    
    if (incoming.length > 0) {
      message += '‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ:\n';
      incoming.forEach(player => {
        message += `‚Ä¢ ${player.firstName} ${player.lastName} (${player.position}, ${player.overallRating})\n`;
      });
      message += '\n';
    }

    if (outgoing.length > 0) {
      message += 'üì§ –ü–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–∞–Ω–¥—É:\n';
      outgoing.forEach(player => {
        message += `‚Ä¢ ${player.firstName} ${player.lastName} (${player.position}, ${player.overallRating})\n`;
      });
    }

    return message;
  }
}
