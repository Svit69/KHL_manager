#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞ —Å —Ä–æ—Å—Ç–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è TypeScript —Ñ–∞–π–ª–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/parse-roster-csv.js path/to/roster.csv
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV
function parseCSV(csvContent) {
  const lines = csvContent.trim().split('\n');
  const headers = lines[0].split(',');
  const players = [];

  for (let i = 1; i < lines.length; i++) {
    const values = parseCSVLine(lines[i]);
    const player = {};
    
    headers.forEach((header, index) => {
      player[header.trim()] = values[index]?.trim() || '';
    });
    
    players.push(player);
  }

  return players;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
function parseCSVLine(line) {
  const result = [];
  let current = '';
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    
    if (char === '"') {
      inQuotes = !inQuotes;
    } else if (char === ',' && !inQuotes) {
      result.push(current);
      current = '';
    } else {
      current += char;
    }
  }
  
  result.push(current);
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∏–≥—Ä–æ–∫–∞
function generatePlayerId(teamId, index) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã ID –¥–ª—è –∫–æ–º–∞–Ω–¥
  const teamIdRanges = {
    'ak-bars': 100,
    'avtomobilist': 0,
    'ska': 200,
    'cska': 300,
    'avangard': 400,
    'dynamo-moscow': 500,
    'lokomotiv': 600,
    'metallurg': 700,
    'salavat-yulaev': 800,
    'torpedo': 900,
    'traktor': 1000,
    'spartak': 1100,
    'dynamo-minsk': 1200,
    'barys': 1300,
    'admiral': 1400,
    'amur': 1500,
    'kunlun': 1600,
    'lada': 1700,
    'neftekhimik': 1800,
    'severstal': 1900,
    'sibir': 2000,
    'sochi': 2100,
    'vityaz': 2200
  };

  const baseId = teamIdRanges[teamId] || 9000;
  return `player-${baseId + index + 1}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è TypeScript —Ñ–∞–π–ª–∞
function generateTypeScriptFile(players, teamId, teamName) {
  const tsPlayers = players.map((player, index) => {
    const favoriteClubs = player.favoriteClubs
      .replace(/"/g, '')
      .split(',')
      .map(club => `'${club.trim()}'`)
      .join(', ');

    return `  {
    id: '${generatePlayerId(teamId, index)}',
    firstName: '${player.firstName}',
    lastName: '${player.lastName}',
    position: '${player.position}',
    birthDate: '${player.birthDate}',
    nationality: '${player.nationality}',
    teamId: '${teamId}',
    contract: {
      endDate: '${player.contractEndDate}',
      type: '${player.contractType}',
      salaryPerYear: ${player.salaryPerYear}, // ${player.salaryPerYear} –º–ª–Ω —Ä—É–±–ª–µ–π
      signedDate: '${player.contractSignedDate}',
      isActive: true
    },
    overallRating: ${player.overallRating},
    potential: ${player.potential},
    physicalCondition: ${player.physicalCondition},
    favoriteClubs: [${favoriteClubs}],
    photoUrl: '/players/photos/${generatePlayerId(teamId, index)}.png',
    status: '${player.status}'
  }`;
  });

  const camelCaseTeamName = teamId.replace(/-([a-z])/g, (g) => g[1].toUpperCase());

  return `import { Player } from '../../types/player';

// –†–æ—Å—Ç–µ—Ä –∫–æ–º–∞–Ω–¥—ã "${teamName}"
export const ${camelCaseTeamName}Roster: Player[] = [
${tsPlayers.join(',\n')}
];

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default ${camelCaseTeamName}Roster;
`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const csvFilePath = process.argv[2];
  
  if (!csvFilePath) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É');
    console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/parse-roster-csv.js path/to/roster.csv');
    process.exit(1);
  }

  if (!fs.existsSync(csvFilePath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvFilePath}`);
    process.exit(1);
  }

  try {
    console.log('üìñ –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª...');
    const csvContent = fs.readFileSync(csvFilePath, 'utf-8');
    
    console.log('üîç –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...');
    const players = parseCSV(csvContent);
    
    if (players.length === 0) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ñ–∞–π–ª–µ');
      process.exit(1);
    }

    const teamId = players[0].teamId;
    const teamName = players[0].teamName;
    
    console.log(`üèí –ù–∞–π–¥–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "${teamName}" (${teamId})`);
    
    console.log('‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript —Ñ–∞–π–ª...');
    const tsContent = generateTypeScriptFile(players, teamId, teamName);
    
    const outputPath = `src/data/players/${teamId}.ts`;
    fs.writeFileSync(outputPath, tsContent, 'utf-8');
    
    console.log(`‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
    console.log('');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log(`1. –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç –≤ src/data/players/index.ts:`);
    console.log(`   import ${teamId.replace(/-([a-z])/g, (g) => g[1].toUpperCase())}Roster from './${teamId}';`);
    console.log('');
    console.log(`2. –î–æ–±–∞–≤—å—Ç–µ –≤ –º–∞—Å—Å–∏–≤ allPlayers:`);
    console.log(`   ...${teamId.replace(/-([a-z])/g, (g) => g[1].toUpperCase())}Roster,`);
    console.log('');
    console.log(`3. –î–æ–±–∞–≤—å—Ç–µ –≤ teamRosters:`);
    console.log(`   '${teamId}': {`);
    console.log(`     teamId: '${teamId}',`);
    console.log(`     players: ${teamId.replace(/-([a-z])/g, (g) => g[1].toUpperCase())}Roster,`);
    console.log(`     lastUpdated: new Date().toISOString()`);
    console.log(`   },`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error.message);
    process.exit(1);
  }
}

main();
